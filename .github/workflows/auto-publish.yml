name: Auto Publish on Push

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency releases)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  id-token: write

jobs:
  auto-publish:
    runs-on: ubuntu-latest
    # Only run if the commit message doesn't contain [skip-publish]
    if: "!contains(github.event.head_commit.message, '[skip-publish]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Run pre-build tests
      if: github.event.inputs.skip_tests != 'true'
      run: npm test

    - name: Build project
      run: npm run build

    - name: Run post-build tests
      if: github.event.inputs.skip_tests != 'true'
      run: npm run test:unit

    - name: Check NPM Token
      run: |
        if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
          echo "‚ùå NPM_TOKEN secret is not set!"
          echo "Please add NPM_TOKEN to repository secrets"
          exit 1
        else
          echo "‚úÖ NPM_TOKEN is configured"
        fi

    - name: Get current version and calculate next
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Calculate next patch version
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        NEXT_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
        
        # Check if version exists on NPM and increment if needed
        while npm view gravixlayer@$NEW_VERSION > /dev/null 2>&1; do
          echo "Version $NEW_VERSION already exists on NPM, trying next..."
          NEXT_PATCH=$((NEXT_PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
        done
        
        echo "Next version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "‚úÖ Will publish as version $NEW_VERSION"

    - name: Update package.json version
      run: |
        npm version ${{ env.NEW_VERSION }} --no-git-tag-version
        echo "‚úÖ Updated package.json to version ${{ env.NEW_VERSION }}"

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        git commit -m "chore: bump version to ${{ env.NEW_VERSION }} [skip-publish]"

    - name: Create and push tag
      run: |
        git tag v${{ env.NEW_VERSION }}
        git push origin main
        git push origin v${{ env.NEW_VERSION }}

    - name: Publish to NPM
      run: |
        echo "Publishing gravixlayer@${{ env.NEW_VERSION }} to NPM..."
        npm publish --access public
        echo "‚úÖ Successfully published to NPM!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.NEW_VERSION }}
        name: "Release v${{ env.NEW_VERSION }}"
        body: |
          ## Release v${{ env.NEW_VERSION }}
          
          **Auto-published from commit:** ${{ github.event.head_commit.message }}
          
          ## What's Changed
          - Code updates and improvements
          - Version bump to ${{ env.NEW_VERSION }}
          - Enhanced functionality and bug fixes
          
          ## Installation
          ```bash
          npm install gravixlayer@${{ env.NEW_VERSION }}
          ```
          
          ## Memory System
          The complete memory system is available with full Mem0 compatibility:
          - Add, search, update, delete memories
          - AI-powered conversation inference  
          - Semantic search with relevance scoring
          - Memory analytics and statistics
          
          ## Links
          - [NPM Package](https://www.npmjs.com/package/gravixlayer)
          - [Documentation](https://docs.gravixlayer.com)
          
          ---
          *This release was automatically created by GitHub Actions*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Success Summary
      run: |
        echo "üéâ AUTO-PUBLISH COMPLETED SUCCESSFULLY!"
        echo "====================================="
        echo "üì¶ NPM Package: gravixlayer@${{ env.NEW_VERSION }}"
        echo "üîó NPM URL: https://www.npmjs.com/package/gravixlayer"
        echo "üè∑Ô∏è  GitHub Tag: v${{ env.NEW_VERSION }}"
        echo "üìã GitHub Release: https://github.com/gravixlayer/gravixlayer-node/releases/tag/v${{ env.NEW_VERSION }}"
        echo ""
        echo "‚úÖ Version bumped: $(node -p "require('./package.json').version") ‚Üí ${{ env.NEW_VERSION }}"
        echo "‚úÖ Published to NPM"
        echo "‚úÖ GitHub release created"
        echo "‚úÖ All tests passed"