name: Auto Version and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  auto-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build project
      run: npm run build
    
    - name: Determine version bump
      id: version_bump
      run: |
        # Get commits since last release
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s" --no-merges)
        
        # Determine version bump type
        if echo "$COMMITS" | grep -q "^feat!"; then
          VERSION_TYPE="major"
        elif echo "$COMMITS" | grep -q "^feat:"; then
          VERSION_TYPE="minor"
        elif echo "$COMMITS" | grep -q "^fix:"; then
          VERSION_TYPE="patch"
        else
          VERSION_TYPE="patch"
        fi
        
        # Override with manual input if provided
        if [ "${{ github.event.inputs.version_type }}" != "" ]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
        fi
        
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        echo "Version bump type: $VERSION_TYPE"
    
    - name: Bump version and create release
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Bump version
        npm version ${{ steps.version_bump.outputs.version_type }} --no-git-tag-version
        
        # Get new version
        NEW_VERSION=$(node -p "require('./package.json').version")
        
        # Commit version bump
        git add package.json package-lock.json
        git commit -m "chore: bump version to $NEW_VERSION"
        
        # Create and push tag
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Get release notes
      id: release_notes
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"%s" --no-merges HEAD~1)
        else
          COMMITS=$(git log ${LATEST_TAG}..HEAD~1 --pretty=format:"%s" --no-merges)
        fi
        
        FILTERED_COMMITS=$(echo "$COMMITS" | grep -v "^chore:" | sed 's/^[a-z]*: *//' | sed 's/^[A-Z]/\L&/' | head -10)
        RELEASE_NOTES=$(echo "$FILTERED_COMMITS" | tr '\n' ';' | sed 's/;$//' | sed 's/;/; /g')
        RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed 's/^./\U&/')
        
        if [ -z "$RELEASE_NOTES" ]; then
          RELEASE_NOTES="Minor updates and improvements"
        fi
        
        echo "release_notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: ${{ steps.release_notes.outputs.release_notes }}
        draft: false
        prerelease: false
    
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}