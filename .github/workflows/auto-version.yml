name: Auto Version and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  auto-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build

    - name: Determine version bump
      id: version
      run: |
        COMMIT_MSG="$(git log -1 --pretty=%B)"
        echo "Commit message: $COMMIT_MSG"
        
        if [[ $COMMIT_MSG == major:* ]]; then
          echo "bump=major" >> $GITHUB_OUTPUT
          echo "Version bump: major (1.0.0)"
        elif [[ $COMMIT_MSG == minor:* ]]; then
          echo "bump=minor" >> $GITHUB_OUTPUT
          echo "Version bump: minor (0.1.0)"
        elif [[ $COMMIT_MSG == fix:* ]]; then
          echo "bump=patch" >> $GITHUB_OUTPUT
          echo "Version bump: patch (0.0.1)"
        else
          echo "bump=none" >> $GITHUB_OUTPUT
          echo "No version bump needed"
        fi

    - name: Bump version
      if: steps.version.outputs.bump != 'none'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Commit version bump
      if: steps.version.outputs.bump != 'none'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

        git add package.json package-lock.json
        git commit -m "chore(release): $NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"

    - name: Generate release notes
      if: steps.version.outputs.bump != 'none'
      id: release_notes
      run: |
        COMMIT_MSG="$(git log -1 --skip=1 --pretty=%B)"
        CLEAN_MSG=$(echo "$COMMIT_MSG" | sed 's/^[a-z]*: *//' | sed 's/^[A-Z]/\L&/')
        echo "RELEASE_NOTES=$CLEAN_MSG" >> $GITHUB_ENV

    - name: Create Release
      if: steps.version.outputs.bump != 'none'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.NEW_VERSION }}
        release_name: Release v${{ env.NEW_VERSION }}
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: false

    - name: Publish to npm
      if: steps.version.outputs.bump != 'none'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}